{
    "genappmodule": {
        "prefix": "genappmodule",
        "body": [
            "import os",
            "os.makedirs(\".\", exist_ok=True)",
            "os.makedirs(\"domain\", exist_ok=True)",
            "if not os.path.exists(\"domain\\crossorigin.py\"):",
            "  file = open(\"domain\\crossorigin.py\", 'a')",
            "  file.write(\"import os \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Date, Time, TIMESTAMP, DateTime, func, case, Float, text \\n\")",
            "  file.write(\"from sqlalchemy.orm import column_property, relationship, deferred, Session \\n\")",
            "  file.write(\"from sqlalchemy.ext.declarative import declarative_base \\n\")",
            "  file.write(\"from sqlalchemy.ext.hybrid import hybrid_property \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from core.db import Base \\n\")",
            "  file.write(\"from core.db.mixins import TimestampLogMixin \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOrigin(Base, TimestampLogMixin): \\n\")",
            "  file.write(\"    __tablename__ = \\\"sys_cross_origin\\\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    id = Column(Integer, primary_key=True, index=True, autoincrement=True) \\n\")",
            "  file.write(\"    link = Column(String(64), unique=True, index=True) \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @classmethod \\n\")",
            "  file.write(\"    def create(cls, link: str) -> \\\"CrossOrigin\\\": \\n\")",
            "  file.write(\"        return cls(link=link) \\n\")",
            "  file.close()",
            "if not os.path.exists(\"domain\\__init__.py\"):",
            "  file = open(\"domain\\__init__.py\", 'a')",
            "  file.write(\"from .crossorigin import CrossOrigin \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"CrossOrigin\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"exceptions\", exist_ok=True)",
            "if not os.path.exists(\"exceptions\\crossorigin.py\"):",
            "  file = open(\"exceptions\\crossorigin.py\", 'a')",
            "  file.write(\"from core.exceptions import CustomException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginDuplicateException(CustomException): \\n\")",
            "  file.write(\"    code = 400 \\n\")",
            "  file.write(\"    error_code = 10400 \\n\")",
            "  file.write(\"    message = \\\"link already created\\\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginNotFoundException(CustomException): \\n\")",
            "  file.write(\"    code = 404 \\n\")",
            "  file.write(\"    error_code = 10401 \\n\")",
            "  file.write(\"    message = \\\"link origin not found\\\" \\n\")",
            "  file.close()",
            "if not os.path.exists(\"exceptions\\__init__.py\"):",
            "  file = open(\"exceptions\\__init__.py\", 'a')",
            "  file.write(\"from .crossorigin import CrossOriginDuplicateException, CrossOriginNotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"CrossOriginDuplicateException\\\", \\\"CrossOriginNotFoundException\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"repository\", exist_ok=True)",
            "if not os.path.exists(\"repository\\crossorigin.py\"):",
            "  file = open(\"repository\\crossorigin.py\", 'a')",
            "  file.write(\"from typing import Optional, List, Union \\n\")",
            "  file.write(\"from datetime import datetime \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from abc import ABCMeta, abstractmethod \\n\")",
            "  file.write(\"from sqlalchemy import or_, select \\n\")",
            "  file.write(\"from sqlalchemy.ext.asyncio import AsyncSession \\n\")",
            "  file.write(\"from sqlalchemy.exc import SQLAlchemyError \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from app._sys.crossorigin.domain import CrossOrigin \\n\")",
            "  file.write(\"from core.db import session \\n\")",
            "  file.write(\"from core.exceptions import DatabaseSavingException, DatabaseUpdatingException, DatabaseDeletingException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginRepo: \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    __metaclass__ = ABCMeta \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def get(self, link: str) -> Optional[CrossOrigin]: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def get_by_id(self, crossorigin_id: int) -> Optional[CrossOrigin]: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def save(self, crossorigin: CrossOrigin) -> CrossOrigin: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def update(self, crossorigin: CrossOrigin, **kwargs) -> CrossOrigin: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def delete(self, crossorigin: CrossOrigin, deleted_user: str) -> None: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginSQLRepo(CrossOriginRepo): \\n\")",
            "  file.write(\"    async def get(self, link: str) -> Optional[CrossOrigin]: \\n\")",
            "  file.write(\"        result = await session.execute(select(CrossOrigin).where(CrossOrigin.link == link)) \\n\")",
            "  file.write(\"        return result.scalars().first() \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_by_id(self, crossorigin_id: int) -> Optional[CrossOrigin]: \\n\")",
            "  file.write(\"        return await session.get(CrossOrigin, crossorigin_id) \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def save(self, crossorigin: CrossOrigin) -> CrossOrigin: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            await session.add(crossorigin) \\n\")",
            "  file.write(\"            await session.commit() \\n\")",
            "  file.write(\"            await session.refresh(crossorigin) \\n\")",
            "  file.write(\"            return crossorigin \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseSavingException(f\\\"Error saving crossorigin: {str(e)}\\\") \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def update(self, crossorigin: CrossOrigin, **kwargs) -> CrossOrigin: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            for key, value in kwargs.items(): \\n\")",
            "  file.write(\"                if hasattr(crossorigin, key) and value is not None: \\n\")",
            "  file.write(\"                    setattr(crossorigin, key, value) \\n\")",
            "  file.write(\"            await session.commit() \\n\")",
            "  file.write(\"            await session.refresh(crossorigin) \\n\")",
            "  file.write(\"            return crossorigin \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseUpdatingException(f\\\"Error updating crossorigin: {str(e)}\\\") \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def delete(self, crossorigin: CrossOrigin, deleted_user: str) -> None: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            if not crossorigin.deleted_at: \\n\")",
            "  file.write(\"                crossorigin.deleted_at = datetime.now() \\n\")",
            "  file.write(\"                crossorigin.deleted_user = deleted_user \\n\")",
            "  file.write(\"                await session.commit() \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseDeletingException(f\\\"Error deleting crossorigin: {str(e)}\\\") \\n\")",
            "  file.close()",
            "if not os.path.exists(\"repository\\__init__.py\"):",
            "  file = open(\"repository\\__init__.py\", 'a')",
            "  file.write(\"from .crossorigin import CrossOriginRepo, CrossOriginSQLRepo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"CrossOriginRepo\\\", \\\"CrossOriginSQLRepo\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"schema\", exist_ok=True)",
            "if not os.path.exists(\"schema\\crossorigin.py\"):",
            "  file = open(\"schema\\crossorigin.py\", 'a')",
            "  file.write(\"from datetime import datetime \\n\")",
            "  file.write(\"from typing import Optional \\n\")",
            "  file.write(\"from pydantic import BaseModel, Field \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginSchema(BaseModel): \\n\")",
            "  file.write(\"    id: int = Field(None, description=\\\"ID\\\") \\n\")",
            "  file.write(\"    link: str = Field(None, description=\\\"allowed link\\\") \\n\")",
            "  file.close()",
            "if not os.path.exists(\"schema\\__init__.py\"):",
            "  file = open(\"schema\\__init__.py\", 'a')",
            "  file.write(\"from .crossorigin import CrossOriginSchema \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"CrossOriginSchema\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"service\", exist_ok=True)",
            "if not os.path.exists(\"service\\crossorigin_command.py\"):",
            "  file = open(\"service\\crossorigin_command.py\", 'a')",
            "  file.write(\"from typing import Union \\n\")",
            "  file.write(\"from pythondi import inject \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from app._sys.crossorigin.domain import CrossOrigin \\n\")",
            "  file.write(\"from app._sys.crossorigin.repository import CrossOriginRepo \\n\")",
            "  file.write(\"from app._sys.crossorigin.schema import CrossOriginSchema \\n\")",
            "  file.write(\"from app._sys.crossorigin.exceptions import CrossOriginNotFoundException, CrossOriginDuplicateException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginCommandService: \\n\")",
            "  file.write(\"    @inject() \\n\")",
            "  file.write(\"    def __init__(self, crossorigin_repo: CrossOriginRepo): \\n\")",
            "  file.write(\"        self.crossorigin_repo = crossorigin_repo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def create_crossorigin(self, link: str) -> CrossOriginSchema: \\n\")",
            "  file.write(\"        if await self.crossorigin_repo.get(link): \\n\")",
            "  file.write(\"            raise CrossOriginDuplicateException \\n\")",
            "  file.write(\"        data_create = CrossOrigin.create(link=link) \\n\")",
            "  file.write(\"        data_saved = await self.crossorigin_repo.save(crossorigin=data_create) \\n\")",
            "  file.write(\"        return data_saved \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def update_crossorigin(self, crossorigin_id: int, link: Union[str, None]) -> CrossOriginSchema: \\n\")",
            "  file.write(\"        data_get = await self.crossorigin_repo.get_by_id(crossorigin_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise CrossOriginNotFoundException \\n\")",
            "  file.write(\"        if await self.crossorigin_repo.get(link): \\n\")",
            "  file.write(\"            raise CrossOriginDuplicateException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        updates = {} \\n\")",
            "  file.write(\"        if link: \\n\")",
            "  file.write(\"            updates[\\\"link\\\"] = link \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        data_updated = await self.crossorigin_repo.update(data_get, updates) \\n\")",
            "  file.write(\"        return data_updated \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def delete_crossorigin(self, crossorigin_id: int, username: str) -> None: \\n\")",
            "  file.write(\"        data_get = await self.crossorigin_repo.get_by_id(crossorigin_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise CrossOriginNotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        await self.crossorigin_repo.delete(data_get, username) \\n\")",
            "  file.close()",
            "if not os.path.exists(\"service\\crossorigin_query.py\"):",
            "  file = open(\"service\\crossorigin_query.py\", 'a')",
            "  file.write(\"from typing import Union, Optional, Any \\n\")",
            "  file.write(\"from pythondi import inject \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from sqlalchemy import or_, select \\n\")",
            "  file.write(\"from datatables import DataTable \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from core.db.session import async_engine \\n\")",
            "  file.write(\"from app._sys.crossorigin.domain import CrossOrigin \\n\")",
            "  file.write(\"from app._sys.crossorigin.repository import CrossOriginRepo \\n\")",
            "  file.write(\"from app._sys.crossorigin.schema import CrossOriginSchema \\n\")",
            "  file.write(\"from app._sys.crossorigin.exceptions import CrossOriginNotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class CrossOriginQueryService: \\n\")",
            "  file.write(\"    @inject() \\n\")",
            "  file.write(\"    def __init__(self, crossorigin_repo: CrossOriginRepo): \\n\")",
            "  file.write(\"        self.crossorigin_repo = crossorigin_repo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_crossorigin_by_id(self, crossorigin_id: str) -> Optional[CrossOriginSchema]: \\n\")",
            "  file.write(\"        data_get = self.crossorigin_repo.get_by_id(crossorigin_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise CrossOriginNotFoundException \\n\")",
            "  file.write(\"        return data_get \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_crossorigin(self, link: str) -> Optional[CrossOriginSchema]: \\n\")",
            "  file.write(\"        data_get = self.crossorigin_repo.get(link) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise CrossOriginNotFoundException \\n\")",
            "  file.write(\"        return data_get \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def datatable_crossorigin(self, params: dict[str, Any]): \\n\")",
            "  file.write(\"        query = select(CrossOrigin, CrossOrigin.id.label(\\\"DT_RowId\\\")).where(CrossOrigin.deleted_at == None) \\n\")",
            "  file.write(\"        datatable: DataTable = DataTable( \\n\")",
            "  file.write(\"            request_params=params, \\n\")",
            "  file.write(\"            table=query, \\n\")",
            "  file.write(\"            column_names=[\\\"DT_RowId\\\", \\\"id\\\", \\\"link\\\"], \\n\")",
            "  file.write(\"            engine=async_engine, \\n\")",
            "  file.write(\"            # callbacks=callbacks, \\n\")",
            "  file.write(\"        ) \\n\")",
            "  file.write(\"        return datatable.output_result() \\n\")",
            "  file.close()",
            "if not os.path.exists(\"service\\__init__.py\"):",
            "  file = open(\"service\\__init__.py\", 'a')",
            "  file.write(\"from .crossorigin_command import CrossOriginCommandService \\n\")",
            "  file.write(\"from .crossorigin_query import CrossOriginQueryService \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"CrossOriginCommandService\\\", \\\"CrossOriginQueryService\\\"] \\n\")",
            "  file.close()"
        ],
        "description": "Generate a Python module with a full folder structure and files"
    }
}