{
    "genappmodule": {
        "prefix": "genappmodule",
        "body": [
            "import os",
            "os.makedirs(\".\", exist_ok=True)",
            "os.makedirs(\"repository\", exist_ok=True)",
            "if not os.path.exists(\"repository/${VARNAME}.py\"):",
            "  file = open(\"repository/${VARNAME}.py\", 'a')",
            "  file.write(\"from typing import Optional, List, Union \\n\")",
            "  file.write(\"from datetime import datetime \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from abc import ABCMeta, abstractmethod \\n\")",
            "  file.write(\"from sqlalchemy import or_, select \\n\")",
            "  file.write(\"from sqlalchemy.ext.asyncio import AsyncSession \\n\")",
            "  file.write(\"from sqlalchemy.exc import SQLAlchemyError \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from app.${VARNAME}.domain import ${CLASSNAME} \\n\")",
            "  file.write(\"from core.db import session \\n\")",
            "  file.write(\"from core.exceptions import DatabaseSavingException, DatabaseUpdatingException, DatabaseDeletingException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}Repo: \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    __metaclass__ = ABCMeta \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def get(self, ${VARNAME}: str) -> Optional[${CLASSNAME}]: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def get_by_id(self, ${VARNAME}_id: int) -> Optional[${CLASSNAME}]: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def save(self, ${VARNAME}: ${CLASSNAME}) -> ${CLASSNAME}: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def update(self, ${VARNAME}: ${CLASSNAME}, **kwargs) -> ${CLASSNAME}: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @abstractmethod \\n\")",
            "  file.write(\"    async def delete(self, ${VARNAME}: ${CLASSNAME}, deleted_user: str) -> None: \\n\")",
            "  file.write(\"        pass \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}SQLRepo(${CLASSNAME}Repo): \\n\")",
            "  file.write(\"    async def get(self, ${VARNAME}: str) -> Optional[${CLASSNAME}]: \\n\")",
            "  file.write(\"        result = await session.execute(select(${CLASSNAME}).where(${CLASSNAME}.${VARNAME} == ${VARNAME})) \\n\")",
            "  file.write(\"        return result.scalars().first() \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_by_id(self, ${VARNAME}_id: int) -> Optional[${CLASSNAME}]: \\n\")",
            "  file.write(\"        return await session.get(${CLASSNAME}, ${VARNAME}_id) \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def save(self, ${VARNAME}: ${CLASSNAME}) -> ${CLASSNAME}: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            await session.add(${VARNAME}) \\n\")",
            "  file.write(\"            await session.commit() \\n\")",
            "  file.write(\"            await session.refresh(${VARNAME}) \\n\")",
            "  file.write(\"            return ${VARNAME} \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseSavingException(f\\\"Error saving ${VARNAME}: {str(e)}\\\") \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def update(self, ${VARNAME}: ${CLASSNAME}, **kwargs) -> ${CLASSNAME}: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            for key, value in kwargs.items(): \\n\")",
            "  file.write(\"                if hasattr(${VARNAME}, key) and value is not None: \\n\")",
            "  file.write(\"                    setattr(${VARNAME}, key, value) \\n\")",
            "  file.write(\"            await session.commit() \\n\")",
            "  file.write(\"            await session.refresh(${VARNAME}) \\n\")",
            "  file.write(\"            return ${VARNAME} \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseUpdatingException(f\\\"Error updating ${VARNAME}: {str(e)}\\\") \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def delete(self, ${VARNAME}: ${CLASSNAME}, deleted_user: str) -> None: \\n\")",
            "  file.write(\"        try: \\n\")",
            "  file.write(\"            if not ${VARNAME}.deleted_at: \\n\")",
            "  file.write(\"                ${VARNAME}.deleted_at = datetime.now() \\n\")",
            "  file.write(\"                ${VARNAME}.deleted_user = deleted_user \\n\")",
            "  file.write(\"                await session.commit() \\n\")",
            "  file.write(\"        except SQLAlchemyError as e: \\n\")",
            "  file.write(\"            await session.rollback() \\n\")",
            "  file.write(\"            raise DatabaseDeletingException(f\\\"Error deleting ${VARNAME}: {str(e)}\\\") \\n\")",
            "  file.close()",
            "if not os.path.exists(\"repository/__init__.py\"):",
            "  file = open(\"repository/__init__.py\", 'a')",
            "  file.write(\"from .${VARNAME} import ${CLASSNAME}Repo, ${CLASSNAME}SQLRepo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"${CLASSNAME}Repo\\\", \\\"${CLASSNAME}SQLRepo\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"exceptions\", exist_ok=True)",
            "if not os.path.exists(\"exceptions/${VARNAME}.py\"):",
            "  file = open(\"exceptions/${VARNAME}.py\", 'a')",
            "  file.write(\"from core.exceptions import CustomException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}DuplicateException(CustomException): \\n\")",
            "  file.write(\"    code = 400 \\n\")",
            "  file.write(\"    error_code = 10000 \\n\")",
            "  file.write(\"    message = \\\"duplicate ${VARNAME} name\\\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}NotFoundException(CustomException): \\n\")",
            "  file.write(\"    code = 404 \\n\")",
            "  file.write(\"    error_code = 10000 \\n\")",
            "  file.write(\"    message = \\\"${VARNAME} not found\\\" \\n\")",
            "  file.close()",
            "if not os.path.exists(\"exceptions/__init__.py\"):",
            "  file = open(\"exceptions/__init__.py\", 'a')",
            "  file.write(\"from .${VARNAME} import ${CLASSNAME}DuplicateException, ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"${CLASSNAME}DuplicateException\\\", \\\"${CLASSNAME}NotFoundException\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"schema\", exist_ok=True)",
            "if not os.path.exists(\"schema/${VARNAME}.py\"):",
            "  file = open(\"schema/${VARNAME}.py\", 'a')",
            "  file.write(\"from datetime import datetime \\n\")",
            "  file.write(\"from typing import Optional \\n\")",
            "  file.write(\"from pydantic import BaseModel, Field \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}Schema(BaseModel): \\n\")",
            "  file.write(\"    id: int = Field(None, description=\\\"ID\\\") \\n\")",
            "  file.write(\"    ${VARNAME}: str = Field(None, description=\\\"${VARNAME}\\\") \\n\")",
            "  file.close()",
            "if not os.path.exists(\"schema/__init__.py\"):",
            "  file = open(\"schema/__init__.py\", 'a')",
            "  file.write(\"from .${VARNAME} import ${CLASSNAME}Schema \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"${CLASSNAME}Schema\\\"] \\n\")",
            "  file.close()",
            "os.makedirs(\"service\", exist_ok=True)",
            "if not os.path.exists(\"service/${VARNAME}_command.py\"):",
            "  file = open(\"service/${VARNAME}_command.py\", 'a')",
            "  file.write(\"from typing import Union \\n\")",
            "  file.write(\"from pythondi import inject \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from app.${VARNAME}.domain import ${CLASSNAME} \\n\")",
            "  file.write(\"from app.${VARNAME}.repository import ${CLASSNAME}Repo \\n\")",
            "  file.write(\"from app.${VARNAME}.schema import ${CLASSNAME}Schema \\n\")",
            "  file.write(\"from app.${VARNAME}.exceptions import ${CLASSNAME}NotFoundException, ${CLASSNAME}DuplicateException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}CommandService: \\n\")",
            "  file.write(\"    @inject() \\n\")",
            "  file.write(\"    def __init__(self, ${VARNAME}_repo: ${CLASSNAME}Repo): \\n\")",
            "  file.write(\"        self.${VARNAME}_repo = ${VARNAME}_repo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def create_${VARNAME}(self, ${VARNAME}: str) -> ${CLASSNAME}Schema: \\n\")",
            "  file.write(\"        if await self.${VARNAME}_repo.get(${VARNAME}): \\n\")",
            "  file.write(\"            raise ${CLASSNAME}DuplicateException \\n\")",
            "  file.write(\"        data_create = ${CLASSNAME}.create(${VARNAME}=${VARNAME}) \\n\")",
            "  file.write(\"        data_saved = await self.${VARNAME}_repo.save(${VARNAME}=data_create) \\n\")",
            "  file.write(\"        return data_saved \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def update_${VARNAME}(self, ${VARNAME}_id: int, ${VARNAME}: Union[str, None]) -> ${CLASSNAME}Schema: \\n\")",
            "  file.write(\"        data_get = await self.${VARNAME}_repo.get_by_id(${VARNAME}_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\"        if await self.${VARNAME}_repo.get(${VARNAME}): \\n\")",
            "  file.write(\"            raise ${CLASSNAME}DuplicateException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        updates = {} \\n\")",
            "  file.write(\"        if ${VARNAME}: \\n\")",
            "  file.write(\"            updates[\\\"${VARNAME}\\\"] = ${VARNAME} \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        data_updated = await self.${VARNAME}_repo.update(data_get, updates) \\n\")",
            "  file.write(\"        return data_updated \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def delete_${VARNAME}(self, ${VARNAME}_id: int, username: str) -> None: \\n\")",
            "  file.write(\"        data_get = await self.${VARNAME}_repo.get_by_id(${VARNAME}_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"        await self.${VARNAME}_repo.delete(data_get, username) \\n\")",
            "  file.close()",
            "if not os.path.exists(\"service/__init__.py\"):",
            "  file = open(\"service/__init__.py\", 'a')",
            "  file.write(\"from .${VARNAME}_command import ${CLASSNAME}CommandService \\n\")",
            "  file.write(\"from .${VARNAME}_query import ${CLASSNAME}QueryService \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"${CLASSNAME}CommandService\\\", \\\"${CLASSNAME}QueryService\\\"] \\n\")",
            "  file.close()",
            "if not os.path.exists(\"service/${VARNAME}_query.py\"):",
            "  file = open(\"service/${VARNAME}_query.py\", 'a')",
            "  file.write(\"from typing import Union, Optional, Any \\n\")",
            "  file.write(\"from pythondi import inject \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from sqlalchemy import or_, select \\n\")",
            "  file.write(\"from datatables import DataTable \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from core.db.session import async_engine \\n\")",
            "  file.write(\"from app.${VARNAME}.domain import ${CLASSNAME} \\n\")",
            "  file.write(\"from app.${VARNAME}.repository import ${CLASSNAME}Repo \\n\")",
            "  file.write(\"from app.${VARNAME}.schema import ${CLASSNAME}Schema \\n\")",
            "  file.write(\"from app.${VARNAME}.exceptions import ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}QueryService: \\n\")",
            "  file.write(\"    @inject() \\n\")",
            "  file.write(\"    def __init__(self, ${VARNAME}_repo: ${CLASSNAME}Repo): \\n\")",
            "  file.write(\"        self.${VARNAME}_repo = ${VARNAME}_repo \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_${VARNAME}_by_id(self, ${VARNAME}_id: str) -> Optional[${CLASSNAME}Schema]: \\n\")",
            "  file.write(\"        data_get = self.${VARNAME}_repo.get_by_id(${VARNAME}_id) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\"        return data_get \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def get_${VARNAME}(self, ${VARNAME}: str) -> Optional[${CLASSNAME}Schema]: \\n\")",
            "  file.write(\"        data_get = self.${VARNAME}_repo.get(${VARNAME}) \\n\")",
            "  file.write(\"        if not data_get: \\n\")",
            "  file.write(\"            raise ${CLASSNAME}NotFoundException \\n\")",
            "  file.write(\"        return data_get \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    async def datatable_${VARNAME}(self, params: dict[str, Any]): \\n\")",
            "  file.write(\"        query = select(${CLASSNAME}, ${CLASSNAME}.id.label(\\\"DT_RowId\\\")).where(${CLASSNAME}.deleted_at == None) \\n\")",
            "  file.write(\"        datatable: DataTable = DataTable( \\n\")",
            "  file.write(\"            request_params=params, \\n\")",
            "  file.write(\"            table=query, \\n\")",
            "  file.write(\"            column_names=[\\\"DT_RowId\\\", \\\"id\\\", \\\"${VARNAME}\\\"], \\n\")",
            "  file.write(\"            engine=async_engine, \\n\")",
            "  file.write(\"            # callbacks=callbacks, \\n\")",
            "  file.write(\"        ) \\n\")",
            "  file.write(\"        return datatable.output_result() \\n\")",
            "  file.close()",
            "os.makedirs(\"domain\", exist_ok=True)",
            "if not os.path.exists(\"domain/${VARNAME}.py\"):",
            "  file = open(\"domain/${VARNAME}.py\", 'a')",
            "  file.write(\"import os \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Date, Time, TIMESTAMP, DateTime, func, case, Float, text \\n\")",
            "  file.write(\"from sqlalchemy.orm import column_property, relationship, deferred, Session \\n\")",
            "  file.write(\"from sqlalchemy.ext.declarative import declarative_base \\n\")",
            "  file.write(\"from sqlalchemy.ext.hybrid import hybrid_property \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"from core.db import Base \\n\")",
            "  file.write(\"from core.db.mixins import TimestampLogMixin \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"class ${CLASSNAME}(Base, TimestampLogMixin): \\n\")",
            "  file.write(\"    __tablename__ = \\\"${VARNAME}\\\" \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    id = Column(Integer, primary_key=True, autoincrement=True) \\n\")",
            "  file.write(\"    ${VARNAME} = Column(String(64), unique=True) \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"    @classmethod \\n\")",
            "  file.write(\"    def create(cls, ${VARNAME}: str) -> \\\"${CLASSNAME}\\\": \\n\")",
            "  file.write(\"        return cls(${VARNAME}=${VARNAME}) \\n\")",
            "  file.close()",
            "if not os.path.exists(\"domain/__init__.py\"):",
            "  file = open(\"domain/__init__.py\", 'a')",
            "  file.write(\"from .${VARNAME} import ${CLASSNAME} \\n\")",
            "  file.write(\" \\n\")",
            "  file.write(\"__all__ = [\\\"${CLASSNAME}\\\"] \\n\")",
            "  file.close()"
        ],
        "description": "Generate a Python module with a full folder structure and files"
    }
}